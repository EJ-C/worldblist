{"version":3,"sources":["containers/logo.svg","components/Hovermenu.js","components/Navbar.js","containers/App.js","components/Header.js","serviceWorker.js","index.js"],"names":["module","exports","Hovermenu","class","href","Navbar","title","App","Component","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","logger","createLogger","rootReducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,kC,+LCe5BC,G,MAbG,WACjB,OACD,yBAAKC,MAAM,eAAX,SACI,yBAAKA,MAAM,SACP,yBAAKC,KAAK,KAAV,kBACA,yCACA,+CACA,iDCWOC,EAjBA,WACd,OACA,6BACC,yBAAKF,MAAM,cACV,uBAAGA,MAAM,qDAAqDC,KAAK,IAAIE,MAAM,QAA7E,eACC,yBAAKH,MAAM,UACV,uBAAGA,MAAM,iCAAiCC,KAAK,IAAIE,MAAM,QAAzD,QACC,uBAAGH,MAAM,iCAAiCC,KAAK,IAAIE,MAAM,SAAzD,SACD,uBAAGH,MAAM,iCAAiCC,KAAK,IAAIE,MAAM,SAAzD,SACD,uBAAGH,MAAM,6BAA6BC,KAAK,IAAIE,MAAM,WAArD,aAGF,kBAAC,EAAD,QCKaC,GCjBMC,Y,uLDOjB,OACA,yBAAKC,UAAU,MACb,kBAAC,EAAD,W,GAJYD,cEIZE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,UCpF3DC,EAASC,yBACTC,EAAeC,YAAgB,IAC/BC,EAAQC,YAAYH,EAAcI,YAAgBC,IAAiBP,IACzEQ,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GAClB,kBAAC,EAAD,OAECM,SAASC,eAAe,SDGnB,SAAkB7B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI6B,IAAIC,cAAwBrC,OAAOC,SAAST,MACpD8C,SAAWtC,OAAOC,SAASqC,OAIvC,OAGFtC,OAAOuC,iBAAiB,QAAQ,WAC9B,IAAMlC,EAAK,UAAMgC,cAAN,sBAEPvC,IAgEV,SAAiCO,EAAOC,GAEtCkC,MAAMnC,EAAO,CACXoC,QAAS,CAAE,iBAAkB,YAE5B/B,MAAK,SAAAgC,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAMrC,MAAK,SAAAC,GACjCA,EAAaqC,aAAatC,MAAK,WAC7BV,OAAOC,SAASgD,eAKpB7C,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA+B,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAMrC,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCzB/BE,K","file":"static/js/main.b29ad4df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nconst Hovermenu = () => {\n\treturn (\n<div class=\"hide-child \">Brands\n    <div class=\"child\">\n        <div href=\"#\" > A-Cold-Wall* </div>\n        <div > A.P.C. </div>\n        <div > Acne Studios </div>\n        <div > ADER error </div>\n    </div>\n  </div>\n  );\n}\n\nexport default Hovermenu","import React, { Component } from 'react';\nimport  Hovermenu from './Hovermenu.js';\n\nconst Navbar = () => {\n\treturn(\n\t<div>\n\t <nav class=\"pa3 pa4-ns\">\n\t  <a class=\"link dim black b f1 f-headline-ns tc db mb3 mb4-ns\" href=\"#\" title=\"Home\">World Blist</a>\n\t   <div class=\"tc pb3\">\n\t    <a class=\"link dim gray f6 f5-ns dib mr3\" href=\"#\" title=\"Home\">Home</a>\n\t     <a class=\"link dim gray f6 f5-ns dib mr3\" href=\"#\" title=\"About\">About</a>\n\t    <a class=\"link dim gray f6 f5-ns dib mr3\" href=\"#\" title=\"Store\">Store</a>\n\t   <a class=\"link dim gray f6 f5-ns dib\" href=\"#\" title=\"Contact\">Contact</a>\n\t  </div>\n\t </nav>\n\t <Hovermenu />\n\t</div>\n  )\n}\n\nexport default Navbar","import React, { Component } from 'react';\nimport { connect} from 'react-redux';\nimport logo from './logo.svg';\nimport Navbar from '../components/Navbar';\nimport Header from '../components/Header';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n    <div className=\"tc\">\n      <Navbar />\n      \n       \n    </div>\n  );\n }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\n\nclass Header extends Component {\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return false;\n  // }\n\n  render() {\n    return (\n      <div></div>\n      );\n  }\n}\n\nexport default Header;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst logger = createLogger()\nconst rootReducers = combineReducers({})\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\nReactDOM.render(\n  <Provider store={store}>\n\t<App />\n  </Provider>,\n\t document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}